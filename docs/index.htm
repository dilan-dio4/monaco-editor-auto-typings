<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>monaco-editor-auto-typings</title>
	<meta name="description" content="Documentation for monaco-editor-auto-typings">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="assets/css/main.css">
	<script async src="assets/js/search.js" id="search-script"></script>
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="assets/js/search.json" data-base=".">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="index.html" class="title">monaco-editor-auto-typings</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<h1>Project monaco-editor-auto-typings</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<div class="tsd-panel tsd-typography">
				<a href="#monaco-editor-auto-typings" id="monaco-editor-auto-typings" style="color: inherit; text-decoration: none;">
					<h1>monaco-editor-auto-typings</h1>
				</a>
				<p><img src="https://github.com/lukasbach/monaco-editor-auto-typings/workflows/Main/badge.svg" alt="Main"></p>
				<blockquote>
					<p>View the demo at <a href="https://lukasbach.github.io/monaco-editor-auto-typings/">lukasbach.github.io/monaco-editor-auto-typings</a></p>
				</blockquote>
				<p>monaco-editor-auto-typings is a plugin for <a href="https://microsoft.github.io/monaco-editor/">Microsoft&#39;s Monaco Editor</a>,
				which automatically loads type declarations when you enter import-calls in the code editor.</p>
				<p>Try it out in the <a href="https://lukasbach.github.io/monaco-editor-auto-typings/">demo</a>! Add some imports to some
					libraries available on npm, such as <code>import express from &#39;express&#39;;</code>, and see that any imported variables
				are automatically strictly typed.</p>
				<p>monaco-editor-auto-typings comes with lots of customization options, but is still a one-liner to
					add to your project. It works by loading declarations from UnPkg. They can then be optionally
				cached in localStorage or elsewhere.</p>
				<ul>
					<li>Demo: <a href="https://lukasbach.github.io/monaco-editor-auto-typings/">lukasbach.github.io/monaco-editor-auto-typings</a></li>
					<li>Documentation: <a href="https://lukasbach.github.io/monaco-editor-auto-typings/docs/">lukasbach.github.io/monaco-editor-auto-typings/docs</a></li>
				</ul>
				<p><img src="https://raw.githubusercontent.com/lukasbach/monaco-editor-auto-typings/HEAD/screenshot.png" alt="Example image"></p>
				<a href="#example" id="example" style="color: inherit; text-decoration: none;">
					<h2>Example</h2>
				</a>
				<p>Install via <code>yarn add monaco-editor-auto-typings</code> or <code>npm install monaco-editor-auto-typings --save</code>.</p>
				<pre><code class="language-typescript"><span style="color: #AF00DB">import</span><span style="color: #000000"> </span><span style="color: #0000FF">*</span><span style="color: #000000"> </span><span style="color: #AF00DB">as</span><span style="color: #000000"> </span><span style="color: #001080">monaco</span><span style="color: #000000"> </span><span style="color: #AF00DB">from</span><span style="color: #000000"> </span><span style="color: #A31515">&#039;monaco-editor/esm/vs/editor/editor.api&#039;</span><span style="color: #000000">;</span>
<span style="color: #AF00DB">import</span><span style="color: #000000"> { </span><span style="color: #001080">AutoTypings</span><span style="color: #000000">, </span><span style="color: #001080">LocalStorageCache</span><span style="color: #000000"> } </span><span style="color: #AF00DB">from</span><span style="color: #000000"> </span><span style="color: #A31515">&#039;monaco-editor-auto-typings&#039;</span><span style="color: #000000">;</span>

<span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1">val</span><span style="color: #000000"> = </span><span style="color: #A31515">`</span>
<span style="color: #A31515">import React from &#039;react&#039;;</span>
<span style="color: #A31515">React.useEffect(0); // Type Error!</span>
<span style="color: #A31515">`</span><span style="color: #000000">;</span>

<span style="color: #008000">// Create monaco editor instance</span>
<span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1">editor</span><span style="color: #000000"> = </span><span style="color: #001080">monaco</span><span style="color: #000000">.</span><span style="color: #001080">editor</span><span style="color: #000000">.</span><span style="color: #795E26">create</span><span style="color: #000000">(</span><span style="color: #001080">document</span><span style="color: #000000">.</span><span style="color: #795E26">getElementById</span><span style="color: #000000">(</span><span style="color: #A31515">&#039;root&#039;</span><span style="color: #000000">)!, {</span>
<span style="color: #000000">  </span><span style="color: #001080">model:</span><span style="color: #000000"> </span><span style="color: #001080">monaco</span><span style="color: #000000">.</span><span style="color: #001080">editor</span><span style="color: #000000">.</span><span style="color: #795E26">createModel</span><span style="color: #000000">(</span><span style="color: #001080">val</span><span style="color: #000000">, </span><span style="color: #A31515">&#039;typescript&#039;</span><span style="color: #000000">),</span>
<span style="color: #000000">});</span>

<span style="color: #008000">// Initialize auto typing on monaco editor. Imports will now automatically be typed!</span>
<span style="color: #0000FF">const</span><span style="color: #000000"> </span><span style="color: #0070C1">autoTypings</span><span style="color: #000000"> = </span><span style="color: #001080">AutoTypings</span><span style="color: #000000">.</span><span style="color: #795E26">create</span><span style="color: #000000">(</span><span style="color: #001080">editor</span><span style="color: #000000">, {</span>
<span style="color: #000000">  </span><span style="color: #001080">sourceCache:</span><span style="color: #000000"> </span><span style="color: #0000FF">new</span><span style="color: #000000"> </span><span style="color: #267F99">LocalStorageCache</span><span style="color: #000000">(), </span><span style="color: #008000">// Cache loaded sources in localStorage. May be omitted</span>
<span style="color: #000000">  </span><span style="color: #008000">// Other options...</span>
<span style="color: #000000">});</span>
</code></pre>
				<a href="#known-limitations" id="known-limitations" style="color: inherit; text-decoration: none;">
					<h2>Known Limitations</h2>
				</a>
				<ul>
					<li>Currently, scoped packages (<code>@org/...</code>) are not supported. This feature is blocked by
						<a href="https://github.com/microsoft/monaco-editor/issues/2295">this issue</a>. <code>@types/...</code> packages
					are not affected and work fine.</li>
				</ul>
				<a href="#configuration" id="configuration" style="color: inherit; text-decoration: none;">
					<h2>Configuration</h2>
				</a>
				<p><a href="https://lukasbach.github.io/monaco-editor-auto-typings/docs/interfaces/options.html">https://lukasbach.github.io/monaco-editor-auto-typings/docs/interfaces/options.html</a></p>
				<pre><code class="language-typescript"><span style="color: #AF00DB">export</span><span style="color: #000000"> </span><span style="color: #0000FF">interface</span><span style="color: #000000"> </span><span style="color: #267F99">Options</span><span style="color: #000000"> {</span>
<span style="color: #000000">  </span><span style="color: #008000">/**</span>
<span style="color: #008000">   * Share source cache between multiple editor instances by storing</span>
<span style="color: #008000">   * the cache in a static property.</span>
<span style="color: #008000">   *</span>
<span style="color: #008000">   * Defaults to false.</span>
<span style="color: #008000">   */</span>
<span style="color: #000000">  </span><span style="color: #001080">shareCache</span><span style="color: #000000">: </span><span style="color: #267F99">boolean</span><span style="color: #000000">;</span>

<span style="color: #000000">  </span><span style="color: #008000">/**</span>
<span style="color: #008000">   * Only use packages specified in the `versions` property.</span>
<span style="color: #008000">   *</span>
<span style="color: #008000">   * Defaults to false.</span>
<span style="color: #008000">   */</span>
<span style="color: #000000">  </span><span style="color: #001080">onlySpecifiedPackages</span><span style="color: #000000">: </span><span style="color: #267F99">boolean</span><span style="color: #000000">;</span>

<span style="color: #000000">  </span><span style="color: #008000">/**</span>
<span style="color: #008000">   * Load typings from prespecified versions when initializing. Versions</span>
<span style="color: #008000">   * need to be specified in the ``versions`` option.</span>
<span style="color: #008000">   *</span>
<span style="color: #008000">   * Defaults to false.</span>
<span style="color: #008000">   */</span>
<span style="color: #000000">  </span><span style="color: #001080">preloadPackages</span><span style="color: #000000">: </span><span style="color: #267F99">boolean</span><span style="color: #000000">;</span>

<span style="color: #000000">  </span><span style="color: #008000">/**</span>
<span style="color: #008000">   * Updates compiler options to defaults suitable for auto-loaded</span>
<span style="color: #008000">   * declarations, specifically by setting ``moduleResolution`` to</span>
<span style="color: #008000">   * ``NodeJs`` and ``allowSyntheticDefaultImports`` to true.</span>
<span style="color: #008000">   * Other options are not changed. Set this property to true to</span>
<span style="color: #008000">   * disable this behaviour.</span>
<span style="color: #008000">   *</span>
<span style="color: #008000">   * Defaults to false.</span>
<span style="color: #008000">   */</span>
<span style="color: #000000">  </span><span style="color: #001080">dontAdaptEditorOptions</span><span style="color: #000000">: </span><span style="color: #267F99">boolean</span><span style="color: #000000">;</span>

<span style="color: #000000">  </span><span style="color: #008000">/**</span>
<span style="color: #008000">   * After typings were resolved and injected into monaco, auto-typings</span>
<span style="color: #008000">   * updates the value of the current model to trigger a refresh in</span>
<span style="color: #008000">   * monaco&#039;s typing logic, so that it uses the injected typings.</span>
<span style="color: #008000">   */</span>
<span style="color: #000000">  </span><span style="color: #001080">dontRefreshModelValueAfterResolvement</span><span style="color: #000000">: </span><span style="color: #267F99">boolean</span><span style="color: #000000">;</span>

<span style="color: #000000">  </span><span style="color: #008000">/**</span>
<span style="color: #008000">   * Prespecified package versions. If a package is loaded whose</span>
<span style="color: #008000">   * name is specified in this object, it will load with the exact</span>
<span style="color: #008000">   * version specified in the object.</span>
<span style="color: #008000">   *</span>
<span style="color: #008000">   * Setting the option ``onlySpecifiedPackages`` to true makes this</span>
<span style="color: #008000">   * property act as a whitelist for packages.</span>
<span style="color: #008000">   *</span>
<span style="color: #008000">   * Setting the option ``preloadPackages`` makes the packages specified</span>
<span style="color: #008000">   * in this property load directly after initializing the auto-loader.</span>
<span style="color: #008000">   */</span>
<span style="color: #000000">  </span><span style="color: #001080">versions</span><span style="color: #000000">?: { [</span><span style="color: #001080">packageName</span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">]: </span><span style="color: #267F99">string</span><span style="color: #000000"> };</span>

<span style="color: #000000">  </span><span style="color: #008000">/**</span>
<span style="color: #008000">   * If a new package was loaded, its name and version is added to the</span>
<span style="color: #008000">   * version object, and this method is called with the updated object.</span>
<span style="color: #008000">   * </span><span style="color: #0000FF">@param</span><span style="color: #008000"> </span><span style="color: #001080">versions</span><span style="color: #008000"> updated versions object.</span>
<span style="color: #008000">   */</span>
<span style="color: #000000">  </span><span style="color: #795E26">onUpdateVersions</span><span style="color: #000000">?: (</span><span style="color: #001080">versions</span><span style="color: #000000">: { [</span><span style="color: #001080">packageName</span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">]: </span><span style="color: #267F99">string</span><span style="color: #000000"> }) </span><span style="color: #0000FF">=&gt;</span><span style="color: #000000"> </span><span style="color: #267F99">void</span><span style="color: #000000">;</span>

<span style="color: #000000">  </span><span style="color: #008000">/**</span>
<span style="color: #008000">   * Supply a cache where declaration files and package.json files are</span>
<span style="color: #008000">   * cached to. Supply an instance of &lt;a href=&quot;classes/localstoragecache.html&quot;&gt;LocalStorageCache&lt;/a&gt; to cache</span>
<span style="color: #008000">   * files to localStorage.</span>
<span style="color: #008000">   */</span>
<span style="color: #000000">  </span><span style="color: #001080">sourceCache</span><span style="color: #000000">: </span><span style="color: #267F99">SourceCache</span><span style="color: #000000">;</span>

<span style="color: #000000">  </span><span style="color: #008000">/**</span>
<span style="color: #008000">   * Supply a custom resolver logic for declaration and package.json files.</span>
<span style="color: #008000">   * Defaults to &lt;a href=&quot;classes/unpkgsourceresolver.html&quot;&gt;UnpkgSourceResolver&lt;/a&gt;. Not recommended to change.</span>
<span style="color: #008000">   */</span>
<span style="color: #000000">  </span><span style="color: #001080">sourceResolver</span><span style="color: #000000">: </span><span style="color: #267F99">SourceResolver</span><span style="color: #000000">;</span>

<span style="color: #000000">  </span><span style="color: #008000">/**</span>
<span style="color: #008000">   * The root directory where your edited files are. Must end with</span>
<span style="color: #008000">   * a slash. The default is suitable unless you change the default</span>
<span style="color: #008000">   * URI of files loaded in the editor.</span>
<span style="color: #008000">   *</span>
<span style="color: #008000">   * Defaults to &quot;inmemory://model/&quot;</span>
<span style="color: #008000">   */</span>
<span style="color: #000000">  </span><span style="color: #001080">fileRootPath</span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">;</span>

<span style="color: #000000">  </span><span style="color: #008000">/**</span>
<span style="color: #008000">   * Debounces code reanalyzing after user has changed the editor contents</span>
<span style="color: #008000">   * by the specified amount. Set to zero to disable. Value provided in</span>
<span style="color: #008000">   * milliseconds.</span>
<span style="color: #008000">   *</span>
<span style="color: #008000">   * Defaults to 4000, i.e. 4 seconds.</span>
<span style="color: #008000">   */</span>
<span style="color: #000000">  </span><span style="color: #001080">debounceDuration</span><span style="color: #000000">: </span><span style="color: #267F99">number</span><span style="color: #000000">;</span>

<span style="color: #000000">  </span><span style="color: #008000">/**</span>
<span style="color: #008000">   * Maximum recursion depth for recursing packages. Determines how many</span>
<span style="color: #008000">   * nested package declarations are loaded. For example, if ``packageRecursionDepth``</span>
<span style="color: #008000">   * has the value 2, the code in the monaco editor references packages ``A1``, ``A2``</span>
<span style="color: #008000">   * and ``A3``, package ``A1`` references package ``B1`` and ``B1`` references ``C1``,</span>
<span style="color: #008000">   * then packages ``A1``, ``A2``, ``A3`` and ``B1`` are loaded. Set to zero to</span>
<span style="color: #008000">   * disable.</span>
<span style="color: #008000">   *</span>
<span style="color: #008000">   * Defaults to 3.</span>
<span style="color: #008000">   */</span>
<span style="color: #000000">  </span><span style="color: #001080">packageRecursionDepth</span><span style="color: #000000">: </span><span style="color: #267F99">number</span><span style="color: #000000">;</span>

<span style="color: #000000">  </span><span style="color: #008000">/**</span>
<span style="color: #008000">   * Maximum recursion depth for recursing files. Determines how many</span>
<span style="color: #008000">   * nested file declarations are loaded. The same as ``packageRecursionDepth``,</span>
<span style="color: #008000">   * but for individual files. Set to zero to disable.</span>
<span style="color: #008000">   *</span>
<span style="color: #008000">   * Defaults to 10.</span>
<span style="color: #008000">   */</span>
<span style="color: #000000">  </span><span style="color: #001080">fileRecursionDepth</span><span style="color: #000000">: </span><span style="color: #267F99">number</span><span style="color: #000000">;</span>

<span style="color: #000000">  </span><span style="color: #008000">/**</span>
<span style="color: #008000">   * Called after progress updates like loaded declarations or events.</span>
<span style="color: #008000">   * </span><span style="color: #0000FF">@param</span><span style="color: #008000"> </span><span style="color: #001080">update</span><span style="color: #008000"> detailed event object containing update infos.</span>
<span style="color: #008000">   * </span><span style="color: #0000FF">@param</span><span style="color: #008000"> </span><span style="color: #001080">textual</span><span style="color: #008000"> a textual representation of the update for debugging.</span>
<span style="color: #008000">   */</span>
<span style="color: #000000">  </span><span style="color: #795E26">onUpdate</span><span style="color: #000000">?: (</span><span style="color: #001080">update</span><span style="color: #000000">: </span><span style="color: #267F99">ProgressUpdate</span><span style="color: #000000">, </span><span style="color: #001080">textual</span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">) </span><span style="color: #0000FF">=&gt;</span><span style="color: #000000"> </span><span style="color: #267F99">void</span><span style="color: #000000">;</span>

<span style="color: #000000">  </span><span style="color: #008000">/**</span>
<span style="color: #008000">   * Called if errors occur.</span>
<span style="color: #008000">   * </span><span style="color: #0000FF">@param</span><span style="color: #008000"> </span><span style="color: #001080">error</span><span style="color: #008000"> a textual representation of the error.</span>
<span style="color: #008000">   */</span>
<span style="color: #000000">  </span><span style="color: #795E26">onError</span><span style="color: #000000">?: (</span><span style="color: #001080">error</span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">) </span><span style="color: #0000FF">=&gt;</span><span style="color: #000000"> </span><span style="color: #267F99">void</span><span style="color: #000000">;</span>
<span style="color: #000000">}</span>
</code></pre>
			</div>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class=" ">
						<a href="modules.html">Exports</a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
					<li class=" tsd-kind-class">
						<a href="classes/autotypings.html" class="tsd-kind-icon">Auto<wbr>Typings</a>
					</li>
					<li class=" tsd-kind-class">
						<a href="classes/localstoragecache.html" class="tsd-kind-icon">Local<wbr>Storage<wbr>Cache</a>
					</li>
					<li class=" tsd-kind-class">
						<a href="classes/unpkgsourceresolver.html" class="tsd-kind-icon">Unpkg<wbr>Source<wbr>Resolver</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/importresourcepathpackage.html" class="tsd-kind-icon">Import<wbr>Resource<wbr>Path<wbr>Package</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/importresourcepathrelative.html" class="tsd-kind-icon">Import<wbr>Resource<wbr>Path<wbr>Relative</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/importresourcepathrelativeinpackage.html" class="tsd-kind-icon">Import<wbr>Resource<wbr>Path<wbr>Relative<wbr>InPackage</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/options.html" class="tsd-kind-icon">Options</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/sourcecache.html" class="tsd-kind-icon">Source<wbr>Cache</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/sourceresolver.html" class="tsd-kind-icon">Source<wbr>Resolver</a>
					</li>
					<li class=" tsd-kind-type-alias">
						<a href="modules.html#importresourcepath" class="tsd-kind-icon">Import<wbr>Resource<wbr>Path</a>
					</li>
					<li class=" tsd-kind-type-alias">
						<a href="modules.html#progressupdate" class="tsd-kind-icon">Progress<wbr>Update</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="modules.html#importresourcepathtostring" class="tsd-kind-icon">import<wbr>Resource<wbr>Path<wbr>ToString</a>
					</li>
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="https://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="assets/js/main.js"></script>
</body>
</html>